name: Deploy PDF to CMYK Converter to Cloud Run

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  PROJECT_ID: ${{ secrets.PROJECT_ID }}
  REGION: ${{ secrets.REGION }}
  REPOSITORY: ${{ secrets.REPOSITORY }}
  SERVICE_NAME: ${{ secrets.SERVICE_NAME }}
  SERVICE_ACCOUNT: ${{ secrets.SERVICE_ACCOUNT }}
  IMAGE_NAME: pdf-cmyk-converter

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and push Docker image
        id: build-push
        run: |
          IMAGE="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          echo "Building and pushing image: $IMAGE"
          docker buildx build \
            --tag "$IMAGE" \
            --cache-from type=local,src=/tmp/.buildx-cache \
            --cache-to type=local,dest=/tmp/.buildx-cache-new \
            --push \
            . \
            --build-arg BUILDKIT_INLINE_CACHE=1
          echo "Setting output: image=$IMAGE"
          echo "image=$IMAGE" >> "$GITHUB_OUTPUT"
          cat "$GITHUB_OUTPUT"
          echo "Listing images in Artifact Registry:"
          gcloud artifacts docker images list "${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}" \
            --format="value(NAME,TAGS)" || echo "Failed to list images"
        env:
          DOCKER_BUILDKIT: 1

      - name: Clean up Docker cache
        if: always()
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache || true

  deploy:
    name: Deploy to Cloud Run
    needs: build-and-push
    runs-on: ubuntu-latest
    permissions:
      contents: read
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Debug image output
        run: |
          echo "Received image from build-and-push: ${{ needs.build-and-push.outputs.image }}"
          if [ -z "${{ needs.build-and-push.outputs.image }}" ]; then
            echo "Error: Image output is empty"
            exit 1
          fi

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Deploy to Cloud Run
        run: |
          echo "Deploying image: ${{ needs.build-and-push.outputs.image }}"
          gcloud run deploy "${{ env.SERVICE_NAME }}" \
            --image "${{ needs.build-and-push.outputs.image }}" \
            --region "${{ env.REGION }}" \
            --platform managed \
            --memory 1Gi \
            --timeout 900 \
            --service-account "${{ env.SERVICE_ACCOUNT }}" \
            --allow-unauthenticated \
            --set-env-vars BUCKET_INPUT=pdf-input-bucket-cmyk-convertor,BUCKET_OUTPUT=pdf-output-bucket-cmyk-convertor,SIGNED_URL_KEY=/secrets/key.json \
            --update-secrets /secrets/key.json=SIGNED_URL_KEY:latest \
            --quiet
        env:
          CLOUDSDK_CORE_DISABLE_PROMPTS: 1

  cleanup:
    name: Cleanup Old Images
    needs: deploy
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read

    steps:
      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Delete old untagged images
        run: |
          gcloud artifacts docker images list "${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}" \
            --filter="-tags:*" \
            --format='value(DIGEST)' | \
          xargs -I {} gcloud artifacts docker images delete \
            "${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}@{}" \
            --quiet || true
