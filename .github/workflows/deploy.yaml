name: Deploy PDF to CMYK Converter to Cloud Run

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  PROJECT_ID: ${{ secrets.PROJECT_ID }}
  REGION: ${{ secrets.REGION }}
  REPOSITORY: ${{ secrets.REPOSITORY }}
  SERVICE_NAME: ${{ secrets.SERVICE_NAME }}
  SERVICE_ACCOUNT: ${{ secrets.SERVICE_ACCOUNT }}
  IMAGE_NAME: pdf-cmyk-converter

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      image: ${{ steps.push.outputs.image }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet

      - name: Build and tag Docker image
        id: build
        run: |
          IMAGE="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          echo "Building image: $IMAGE"
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV
          echo "image=$IMAGE" >> "$GITHUB_OUTPUT"
          
          docker buildx build \
            --tag "$IMAGE" \
            --cache-from type=local,src=/tmp/.buildx-cache \
            --cache-to type=local,dest=/tmp/.buildx-cache-new \
            --load \
            . \
            --build-arg BUILDKIT_INLINE_CACHE=1
        env:
          DOCKER_BUILDKIT: 1

      - name: Push Docker image
        id: push
        run: |
          IMAGE="${{ steps.build.outputs.image }}"
          echo "Pushing image: $IMAGE"
          docker push "$IMAGE"
          echo "image=$IMAGE" >> "$GITHUB_OUTPUT"
          echo "Image pushed successfully: $IMAGE"

      - name: Verify image output
        run: |
          echo "Final image output: ${{ steps.push.outputs.image }}"

      - name: Clean up Docker cache
        if: always()
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache || true

  deploy:
    name: Deploy to Cloud Run
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Debug image value
        run: |
          echo "Image to deploy: '${{ needs.build-and-push.outputs.image }}'"
          echo "Length: ${#IMAGE}"
          if [ -z "${{ needs.build-and-push.outputs.image }}" ]; then
            echo "ERROR: Image is empty!"
            exit 1
          fi
        env:
          IMAGE: ${{ needs.build-and-push.outputs.image }}

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Deploy to Cloud Run
        run: |
          IMAGE="${{ needs.build-and-push.outputs.image }}"
          
          # Additional validation
          if [ -z "$IMAGE" ]; then
            echo "ERROR: Image variable is empty"
            exit 1
          fi
          
          echo "Deploying image: $IMAGE"
          echo "Service name: ${{ env.SERVICE_NAME }}"
          echo "Region: ${{ env.REGION }}"
          
          gcloud run deploy "${{ env.SERVICE_NAME }}" \
            --image="$IMAGE" \
            --region="${{ env.REGION }}" \
            --platform=managed \
            --memory=1Gi \
            --timeout=900 \
            --service-account="${{ env.SERVICE_ACCOUNT }}" \
            --allow-unauthenticated \
            --set-env-vars="BUCKET_INPUT=pdf-input-bucket-cmyk-convertor,BUCKET_OUTPUT=pdf-output-bucket-cmyk-convertor,SIGNED_URL_KEY=/secrets/key.json" \
            --update-secrets="/secrets/key.json=SIGNED_URL_KEY:latest" \
            --quiet
        env:
          CLOUDSDK_CORE_DISABLE_PROMPTS: 1

      - name: Get service URL
        run: |
          SERVICE_URL=$(gcloud run services describe "${{ env.SERVICE_NAME }}" \
            --region="${{ env.REGION }}" \
            --format="value(status.url)")
          echo "Service deployed at: $SERVICE_URL"

  cleanup:
    name: Cleanup Old Images
    needs: deploy
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Delete old untagged images
        run: |
          echo "Cleaning up old images..."
          gcloud artifacts docker images list "${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}" \
            --filter="-tags:*" \
            --format='value(DIGEST)' | \
          head -10 | \
          xargs -I {} gcloud artifacts docker images delete \
            "${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}@{}" \
            --quiet || true
          echo "Cleanup completed"